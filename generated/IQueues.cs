// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AutorestOrchestratorClient
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Queues operations.
    /// </summary>
    public partial interface IQueues
    {
        /// <summary>
        /// Starts a transaction.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.View and
        /// Transactions.Create and Transactions.Edit.
        /// </remarks>
        /// <param name='startTransactionParameters'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<QueueItemDto>> StartTransactionWithHttpMessagesAsync(StartTransactionParameters startTransactionParameters = default(StartTransactionParameters), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Adds a new queue item.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Create.
        /// </remarks>
        /// <param name='queueItemParameters'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        Task<HttpOperationResponse<QueueItemDto>> AddQueueItemWithHttpMessagesAsync(QueueItemParameters queueItemParameters = default(QueueItemParameters), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Call operation  BulkAddQueueItems
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Create.
        /// </remarks>
        /// <param name='bulkAddQueueItemsParameters'>
        /// BulkAddQueueItems action parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<BulkOperationResponseDtoFailedQueueItemDto>> BulkAddQueueItemsWithHttpMessagesAsync(BulkAddQueueItemsParameters bulkAddQueueItemsParameters, Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the result of a transaction.
        /// </summary>
        /// <remarks>
        /// Required permissions: Queues.View and Transactions.Edit.
        /// </remarks>
        /// <param name='id'>
        /// key: Id
        /// </param>
        /// <param name='setTransactionParameters'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        Task<HttpOperationResponse> SetTransactionResultByIdWithHttpMessagesAsync(long id, SetTransactionParameters setTransactionParameters = default(SetTransactionParameters), Dictionary<string, List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
