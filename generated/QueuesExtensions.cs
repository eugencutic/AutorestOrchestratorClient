// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AutorestOrchestratorClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Queues.
    /// </summary>
    public static partial class QueuesExtensions
    {
            /// <summary>
            /// Starts a transaction.
            /// </summary>
            /// <remarks>
            /// Required permissions: Queues.View and Transactions.View and
            /// Transactions.Create and Transactions.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='startTransactionParameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueueItemDto> StartTransactionAsync(this IQueues operations, StartTransactionParameters startTransactionParameters = default(StartTransactionParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StartTransactionWithHttpMessagesAsync(startTransactionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a new queue item.
            /// </summary>
            /// <remarks>
            /// Required permissions: Queues.View and Transactions.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='queueItemParameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<QueueItemDto> AddQueueItemAsync(this IQueues operations, QueueItemParameters queueItemParameters = default(QueueItemParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddQueueItemWithHttpMessagesAsync(queueItemParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Call operation  BulkAddQueueItems
            /// </summary>
            /// <remarks>
            /// Required permissions: Queues.View and Transactions.Create.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bulkAddQueueItemsParameters'>
            /// BulkAddQueueItems action parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BulkOperationResponseDtoFailedQueueItemDto> BulkAddQueueItemsAsync(this IQueues operations, BulkAddQueueItemsParameters bulkAddQueueItemsParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BulkAddQueueItemsWithHttpMessagesAsync(bulkAddQueueItemsParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sets the result of a transaction.
            /// </summary>
            /// <remarks>
            /// Required permissions: Queues.View and Transactions.Edit.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// key: Id
            /// </param>
            /// <param name='setTransactionParameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SetTransactionResultByIdAsync(this IQueues operations, long id, SetTransactionParameters setTransactionParameters = default(SetTransactionParameters), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.SetTransactionResultByIdWithHttpMessagesAsync(id, setTransactionParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
