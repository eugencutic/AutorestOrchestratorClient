// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AutorestOrchestratorClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RobotsService.
    /// </summary>
    public static partial class RobotsServiceExtensions
    {
            /// <summary>
            /// Post to the server a collection of heartbeat messages generated by the
            /// Robots from a Machine
            /// </summary>
            /// <remarks>
            /// Every 30 seconds the UiPath service running on a Robot Machine posts a
            /// collection of heartbeat messages (one for each Robot hosted on the
            /// Machine).
            /// The response is a collection of commands specific to all the Robots defined
            /// on that Machine, including the ones that were added in the meanwhile.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HeartbeatResponse> HeartbeatAsync(this IRobotsService operations, HeartbeatPayload payload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.HeartbeatWithHttpMessagesAsync(payload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post to the server a heartbeat collection with jobs information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='heartbeats'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SubmitJobStateAsync(this IRobotsService operations, IList<HeartbeatDto> heartbeats, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.SubmitJobStateWithHttpMessagesAsync(heartbeats, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets from the server all the processes associated with a Robot.
            /// </summary>
            /// <remarks>
            /// Gets from the server all the processes associated with a Robot
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='identifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PublishedProcess>> GetProcessesAsync(this IRobotsService operations, RobotIdentifier identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetProcessesWithHttpMessagesAsync(identifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets from the server all the Robots associated with a Machine and having
            /// the specified licenseKey.
            /// If the received payload contains the ServiceUserName, it returns only the
            /// Robot with that specific UserName.
            /// </summary>
            /// <remarks>
            /// Gets from the server all the Robots associated with a Machine and having
            /// the specified licenseKey.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RobotServiceResponse> StartServiceAsync(this IRobotsService operations, RobotServicePayload payload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StartServiceWithHttpMessagesAsync(payload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Called by RobotSvc to disconnect all Robots.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task StopServiceAsync(this IRobotsService operations, HeartbeatPayload payload, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.StopServiceWithHttpMessagesAsync(payload, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Begins a front-office session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='identifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RobotDetailsDto> BeginSessionAsync(this IRobotsService operations, RobotIdentifier identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginSessionWithHttpMessagesAsync(identifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Ends the front-office session.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='identifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EndSessionAsync(this IRobotsService operations, RobotIdentifier identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.EndSessionWithHttpMessagesAsync(identifier, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Called by RobotSvc to connect the Robots on the machine it is running on to
            /// Orchestrator (under automatic deployment).
            /// </summary>
            /// <remarks>
            /// This is the initial handshake between the robot service and Orchestrator,
            /// the equivalent of configuring the connection
            /// info from Robot tray (manual deployment). It is supported only for
            /// authorized machines, i.e. the robot machine is part of the
            /// same AD as Orchestrator. To enforce this, the request must contain the
            /// machine identity. The robots must be already provisioned
            /// in Orchestrator before this step, otherwise RobotSvc will continue to call
            /// this method until they are.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tenantId'>
            /// The tenant under which already defined robots are searched for.
            /// </param>
            /// <param name='domainName'>
            /// Domain name for the machine where robot is installed. If it's not provided,
            /// we'll use the one specified in web.config
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionData> GetConnectionDataAsync(this IRobotsService operations, int tenantId, string domainName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetConnectionDataWithHttpMessagesAsync(tenantId, domainName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Uploads a screenshot for the given jobKey and robotKey.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='file'>
            /// </param>
            /// <param name='robotKey'>
            /// </param>
            /// <param name='jobKey'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UploadScreenshotAsync(this IRobotsService operations, Stream file, string robotKey, string jobKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.UploadScreenshotWithHttpMessagesAsync(file, robotKey, jobKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Post to the server a collection of heartbeat messages generated by the
            /// Robots from a Machine
            /// </summary>
            /// <remarks>
            /// Every 30 seconds the UiPath service running on a Robot Machine posts a
            /// collection of heartbeat messages (one for each Robot hosted on the
            /// Machine).
            /// The response is a collection of commands specific to all robots defined on
            /// that Machine, including the ones that were added in the meanwhile.
            /// DEPRECATED. Used for Robots with version lower or equal to 18.2
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hbts'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<IList<RobotCommand>> SubmitHeartbeatAsync(this IRobotsService operations, IList<HeartbeatDto> hbts, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SubmitHeartbeatWithHttpMessagesAsync(hbts, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets from the server all the processes associated with a Robot.
            /// </summary>
            /// <remarks>
            /// DEPRECATED. Gets from the server all the processes associated with a Robot
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='robotKey'>
            /// The unique key identifying the Robot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<IList<PublishedProcess>> GetAssociatedProcessesAsync(this IRobotsService operations, string robotKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAssociatedProcessesWithHttpMessagesAsync(robotKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets from the server all the Robots associated with a Machine and having
            /// the specified licenseKey
            /// </summary>
            /// <remarks>
            /// Gets from the server all the Robots associated with a Machine and having
            /// the specified licenseKey.
            /// DEPRECATED. Used for Robots with version lower or equal to 18.2
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='licenseKey'>
            /// The licenseKey that the returned Robots must have.
            /// </param>
            /// <param name='machineName'>
            /// The name of the Machine that the returned Robots must be associated with
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task<IList<RobotDetailsDto>> GetRobotMappingsAsync(this IRobotsService operations, string licenseKey, string machineName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetRobotMappingsWithHttpMessagesAsync(licenseKey, machineName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Acquire a license.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='identifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task AcquireLicenseAsync(this IRobotsService operations, RobotIdentifier identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.AcquireLicenseWithHttpMessagesAsync(identifier, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Release active license.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='identifier'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            [System.Obsolete("This operation is deprecated. Please do not use it any longer.")]
            public static async Task ReleaseLicenseAsync(this IRobotsService operations, RobotIdentifier identifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.ReleaseLicenseWithHttpMessagesAsync(identifier, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
