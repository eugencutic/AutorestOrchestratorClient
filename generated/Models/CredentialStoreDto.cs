// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AutorestOrchestratorClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Defines the properties of a Credential Store.
    /// </summary>
    public partial class CredentialStoreDto
    {
        /// <summary>
        /// Initializes a new instance of the CredentialStoreDto class.
        /// </summary>
        public CredentialStoreDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CredentialStoreDto class.
        /// </summary>
        /// <param name="type">Possible values include: 'Database',
        /// 'CyberArk'</param>
        /// <param name="additionalConfiguration">Additional information
        /// specific to the type of the Credential Store.</param>
        public CredentialStoreDto(string name, CredentialStoreDtoType type, string additionalConfiguration = default(string), long? id = default(long?))
        {
            Name = name;
            Type = type;
            AdditionalConfiguration = additionalConfiguration;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Database', 'CyberArk'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public CredentialStoreDtoType Type { get; set; }

        /// <summary>
        /// Gets or sets additional information specific to the type of the
        /// Credential Store.
        /// </summary>
        [JsonProperty(PropertyName = "AdditionalConfiguration")]
        public string AdditionalConfiguration { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
