// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace AutorestOrchestratorClient.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for SessionDtoLicenseErrorCode.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum SessionDtoLicenseErrorCode
    {
        [EnumMember(Value = "NoLicense")]
        NoLicense,
        [EnumMember(Value = "LicenseExpired")]
        LicenseExpired,
        [EnumMember(Value = "LicenseUnregistered")]
        LicenseUnregistered,
        [EnumMember(Value = "NoAvailableLicenses")]
        NoAvailableLicenses,
        [EnumMember(Value = "NotEnoughAvailableSlots")]
        NotEnoughAvailableSlots,
        [EnumMember(Value = "NotEnoughRuntimeLicenses")]
        NotEnoughRuntimeLicenses,
        [EnumMember(Value = "LicenseIsAlreadyInUse")]
        LicenseIsAlreadyInUse,
        [EnumMember(Value = "InvalidRequest")]
        InvalidRequest,
        [EnumMember(Value = "SlotsExceedLicenseLimit")]
        SlotsExceedLicenseLimit,
        [EnumMember(Value = "RuntimeDisabled")]
        RuntimeDisabled
    }
    internal static class SessionDtoLicenseErrorCodeEnumExtension
    {
        internal static string ToSerializedValue(this SessionDtoLicenseErrorCode? value)
        {
            return value == null ? null : ((SessionDtoLicenseErrorCode)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this SessionDtoLicenseErrorCode value)
        {
            switch( value )
            {
                case SessionDtoLicenseErrorCode.NoLicense:
                    return "NoLicense";
                case SessionDtoLicenseErrorCode.LicenseExpired:
                    return "LicenseExpired";
                case SessionDtoLicenseErrorCode.LicenseUnregistered:
                    return "LicenseUnregistered";
                case SessionDtoLicenseErrorCode.NoAvailableLicenses:
                    return "NoAvailableLicenses";
                case SessionDtoLicenseErrorCode.NotEnoughAvailableSlots:
                    return "NotEnoughAvailableSlots";
                case SessionDtoLicenseErrorCode.NotEnoughRuntimeLicenses:
                    return "NotEnoughRuntimeLicenses";
                case SessionDtoLicenseErrorCode.LicenseIsAlreadyInUse:
                    return "LicenseIsAlreadyInUse";
                case SessionDtoLicenseErrorCode.InvalidRequest:
                    return "InvalidRequest";
                case SessionDtoLicenseErrorCode.SlotsExceedLicenseLimit:
                    return "SlotsExceedLicenseLimit";
                case SessionDtoLicenseErrorCode.RuntimeDisabled:
                    return "RuntimeDisabled";
            }
            return null;
        }

        internal static SessionDtoLicenseErrorCode? ParseSessionDtoLicenseErrorCode(this string value)
        {
            switch( value )
            {
                case "NoLicense":
                    return SessionDtoLicenseErrorCode.NoLicense;
                case "LicenseExpired":
                    return SessionDtoLicenseErrorCode.LicenseExpired;
                case "LicenseUnregistered":
                    return SessionDtoLicenseErrorCode.LicenseUnregistered;
                case "NoAvailableLicenses":
                    return SessionDtoLicenseErrorCode.NoAvailableLicenses;
                case "NotEnoughAvailableSlots":
                    return SessionDtoLicenseErrorCode.NotEnoughAvailableSlots;
                case "NotEnoughRuntimeLicenses":
                    return SessionDtoLicenseErrorCode.NotEnoughRuntimeLicenses;
                case "LicenseIsAlreadyInUse":
                    return SessionDtoLicenseErrorCode.LicenseIsAlreadyInUse;
                case "InvalidRequest":
                    return SessionDtoLicenseErrorCode.InvalidRequest;
                case "SlotsExceedLicenseLimit":
                    return SessionDtoLicenseErrorCode.SlotsExceedLicenseLimit;
                case "RuntimeDisabled":
                    return SessionDtoLicenseErrorCode.RuntimeDisabled;
            }
            return null;
        }
    }
}
